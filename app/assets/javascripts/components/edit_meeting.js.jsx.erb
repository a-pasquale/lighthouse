var EditMeeting = React.createClass({
  getInitialState: function() {
    var action_items = $.map(this.props.meeting.action_items, function(obj){
      return { user_id: obj.user_id, description: obj.description, due_date: obj.due_date, id: obj.id };
    });
    return { notes: this.props.meeting.notes, action_items: action_items }
  },
  componentDidMount: function() {
    tinymce.remove();
    $("textarea.tinymce-meetings-notes-" + this.props.meeting.id).tinymce({
      menubar: false,
      statusbar: false,
      height: 200,
      content_css: "<%= stylesheet_path 'customize_tinymce.css' %>",
      preview_styles: false,
      toolbar: ["undo redo | bold underline italic | numlist outdent indent link"],
      plugins: "image, link, preview, media, paste",
      setup: function(ed) {
          ed.on('keydown', function(event) {
              if (event.keyCode == 9) { 
                if (event.shiftKey) {
                  ed.execCommand('Outdent');
                }
                else {
                  ed.execCommand('Indent');
                }
                event.preventDefault();
                return false;
              }
          });
      }
    });
  },
  closeNewMeeting: function(e){
    e.preventDefault();
    tinymce.remove("textarea.tinymce-meetings-notes-" + this.props.meeting.id);
    this.props.closeNewMeeting();
  },
  addActionItem: function(index, item) {
    this.setState({ action_items: React.addons.update(this.state.action_items, {$splice: [[index, 1, item]]}) });
  },
  removeActionItem: function(index) {
    this.setState({ action_items: React.addons.update(this.state.action_items, {$splice: [[index, 1]]}) });
  },
  handleClickAdd: function(e) {
    e.preventDefault();
    this.setState({ action_items: React.addons.update(this.state.action_items, {$push: [{description: "", due_date: ""}] }) });
  },
  handleSubmit: function(e) {
    e.preventDefault();
    tinymce.get('meeting_notes').save();
    var form = new FormData($(e.currentTarget)[0]);

    $.ajax({
      url: "/meetings/" + this.props.meeting.id ,
      dataType: "JSON",
      type: "PATCH",
      data: form,
      processData: false,
      contentType: false,
      success: function(data) {
        this.props.updateMeetings();
      }.bind(this),
      error: function(data) {
        console.log(data);
      }
    });

  },
  render: function(){

    var actionItemNodes = this.state.action_items.map(function(action_item, i){
      return (
        <NewActionItem  {...this.props} key={i} reactKey={i} action_item={action_item} removeActionItem={this.removeActionItem} addActionItem={this.addActionItem} />
      );
    }.bind(this));

      return (
        <div className="row new-meeting"> 
          <div className="col s12">
            <div className="card">
              <div className="card-date blue darken-1 white-text">
                New Meeting
                <a className="right white-text" href="#" onClick={this.closeNewMeeting}>
                  <i className="fa fa-times"></i>
                </a>
              </div>
              <div className="card-content">
                <form  onSubmit={this.handleSubmit} >
                  <input name="utf8" type="hidden" value="âœ“" />
                  <input type="hidden" name="authenticity_token" value={this.props.authenticityToken} />
                  <input type="hidden" value={this.props.userId} name="meeting[user_id]" id="meeting_user_id" />
                  <div className="row">
                    <div className="input-field col s12">
                      <h6 className="bold grey-text text-darken-2">Notes</h6>
                      <textarea className={"tinymce-meetings-notes-" + this.props.meeting.id}
                                name="meeting[notes]" 
                                id="meeting_notes"
                                defaultValue={this.state.notes}
                                >
                      </textarea>
                    </div>
                  </div>

                 <div className="row no-margin">
                    <div className="input-field col s12">                
                      <h6 className="bold grey-text text-darken-2">Action Items</h6>
                    </div>
                  </div>

                 <div className="row no-margin action-items">
                    <div className="col s12">  
                      <ul className="collection with-header">

                        <li className="collection-header grey lighten-3">
                          
                          <div className="row no-margin grey-text text-darken-2">

                            <div className="col s9 push-s1">
                            Description
                            </div>
                            <div className="col s2 push-s1 no-padding right-align">
                            Due Date
                            </div>
                          </div>

                        </li>
                          {actionItemNodes}
                      </ul>
                    </div>
                  </div>

                  <div className="row">
                    <div className="col s12">
                      <button name="button"
                              type="button"
                              style={ {marginRight: '10px'} }
                              className="btn waves-effect waves-light blue darken-1"
                              onClick={this.handleClickAdd}>
                              Add Action Item
                      </button>
                      <button name="button"
                              type="submit"
                              className="btn waves-effect waves-light">
                              Save
                      </button>
                    </div>
                  </div>


                </form>
              </div>
            </div>
          </div>
        </div>
      );

  }

});